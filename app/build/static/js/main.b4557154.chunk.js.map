{"version":3,"sources":["Test.js","containers/Signup.js","containers/Login.js","serviceWorker.js","index.js"],"names":["Test","useState","test","setTest","useEffect","fetch","then","res","json","data","className","response","Signup","initialState","fields","setValues","event","target","id","value","useFormFields","firstname","lastname","email","password","confirmPassword","handleFieldChange","validateForm","length","String","toLowerCase","a","requestOptions","method","headers","body","JSON","stringify","name_first","name_last","console","log","SubmitButton","isLoading","setLoading","handleSubmit","Button","variant","disabled","onClick","type","action","FormGroup","controlId","FormLabel","FormControl","values","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","addEventListener","style","display"],"mappings":"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","file":"static/js/main.b4557154.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\n\r\nfunction Test() {\r\n    const [test, setTest] = useState({\"test\": \"API not running\"});\r\n\r\n    useEffect(() => {\r\n        fetch('/api/test/test1').then(res =>\r\n            res.json().then(data => {\r\n                setTest(data);\r\n            })\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h5 className=\"py-3\">API return: {test.response}</h5>\r\n            <p className=\"text-muted\">Lorem ipsum dolor sit amet, tincidunt vestibulum. Fusce egeabus consectetuer turpis, suspendisse.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n","/** Code adapted from https://serverless-stack.com/chapters/create-the-signup-form.html */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n    FormGroup,\r\n    FormControl,\r\n    FormLabel,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport './Pop-up.css'\r\n\r\n\r\nfunction useFormFields(initialState) {\r\n    const [fields, setValues] = useState(initialState);\r\n\r\n    return [\r\n        fields,\r\n        function(event) {\r\n            setValues({\r\n                ...fields,\r\n                [event.target.id]: event.target.value\r\n            });\r\n        }\r\n    ];\r\n}\r\n\r\nexport default function Signup() {\r\n    const [fields, handleFieldChange] = useFormFields({\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n    });\r\n    function validateForm() {\r\n        return (\r\n            fields.email.length > 0 &&\r\n            fields.password.length > 0 &&\r\n            fields.confirmPassword === fields.password &&\r\n            validateEmail(fields.email)\r\n        );\r\n    }\r\n\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({email: fields.email, password: fields.password, name_first: fields.firstname, name_last: fields.lastname})\r\n        };\r\n        const response = await fetch('api/user', requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    function renderForm() {\r\n        return (\r\n            <div className=\"form-popup\" id=\"sign_up_form\">\r\n                <form action=\"/action_page.php\" className=\"form-container\">\r\n                    <h1>Sign Up</h1>\r\n\r\n                    <FormGroup controlId=\"First Name\">\r\n                        <FormLabel>First Name</FormLabel>\r\n                        <FormControl\r\n                            type=\"text\"\r\n                            values = {fields.firstname}\r\n                            onChange={handleFieldChange}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup controlId=\"Last Name\">\r\n                        <FormLabel>Last Name</FormLabel>\r\n                        <FormControl\r\n                            type=\"text\"\r\n                            values = {fields.lastname}\r\n                            onChange={handleFieldChange}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"email\">\r\n                        <FormLabel>Email</FormLabel>\r\n                        <FormControl\r\n                            type=\"email\"\r\n                            values = {fields.email}\r\n                            onChange={handleFieldChange}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup controlId=\"password\">\r\n                        <FormLabel>Password</FormLabel>\r\n                        <FormControl\r\n                            type=\"password\"\r\n                            value={fields.password}\r\n                            onChange={handleFieldChange}\r\n                    />\r\n                    </FormGroup>\r\n                    <FormGroup controlId=\"confirmPassword\">\r\n                        <FormLabel>Confirm Password</FormLabel>\r\n                        <FormControl\r\n                            type=\"password\"\r\n                            onChange={handleFieldChange}\r\n                            value={fields.confirmPassword}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <SubmitButton />\r\n\r\n                    <button type=\"button\" className=\"btn cancel\" id=\"pop_up_close\">Close</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function SubmitButton() {\r\n        const [isLoading, setLoading] = useState(false);\r\n\r\n        useEffect(() => {\r\n            if (isLoading && validateForm()) {\r\n                handleSubmit().then(() => {\r\n                    setLoading(false);\r\n                });\r\n            }\r\n        }, [isLoading]);\r\n\r\n        const handleClick = () => setLoading(true);\r\n\r\n        return (\r\n            <Button\r\n                className=\"btn\"\r\n                variant=\"primary\"\r\n                disabled={isLoading}\r\n                onClick={!isLoading ? handleClick : null}\r\n                type=\"submit\"\r\n            >\r\n                {isLoading ? 'Loading...' : 'Submit'}\r\n            </Button>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            {renderForm()}\r\n            <div className=\"cover\" id=\"cover\"></div>\r\n        </div>\r\n    );\r\n}\r\n","/** Code adapted from https://serverless-stack.com/chapters/create-the-signup-form.html */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n    FormGroup,\r\n    FormControl,\r\n    FormLabel,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport './Pop-up.css'\r\n\r\n\r\nfunction useFormFields(initialState) {\r\n    const [fields, setValues] = useState(initialState);\r\n\r\n    return [\r\n        fields,\r\n        function(event) {\r\n            setValues({\r\n                ...fields,\r\n                [event.target.id]: event.target.value\r\n            });\r\n        }\r\n    ];\r\n}\r\n\r\nexport default function Signup() {\r\n    const [fields, handleFieldChange] = useFormFields({\r\n        email: \"\",\r\n        password: \"\",\r\n    });\r\n    function validateForm() {\r\n        return (\r\n            fields.email.length > 0 &&\r\n            fields.password.length > 0 &&\r\n            validateEmail(fields.email)\r\n        );\r\n    }\r\n\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    async function handleSubmit() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({email: fields.email, password: fields.password})\r\n        };\r\n        const response = await fetch('api/auth/login', requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    function renderForm() {\r\n        return (\r\n            <div className=\"form-popup\" id=\"log_in_form\">\r\n                <form action=\"/action_page.php\" className=\"form-container\">\r\n                    <h1>Login</h1>\r\n                    <FormGroup controlId=\"email\">\r\n                        <FormLabel>Email</FormLabel>\r\n                        <FormControl\r\n                            type=\"email\"\r\n                            values = {fields.email}\r\n                            onChange={handleFieldChange}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup controlId=\"password\">\r\n                        <FormLabel>Password</FormLabel>\r\n                        <FormControl\r\n                            type=\"password\"\r\n                            values = {fields.password}\r\n                            onChange={handleFieldChange}\r\n                    />\r\n                    </FormGroup>\r\n\r\n                    <SubmitButton />\r\n\r\n                    <button type=\"button\" className=\"btn cancel\" id=\"login_pop_up_close\">Close</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function SubmitButton() {\r\n        const [isLoading, setLoading] = useState(false);\r\n\r\n        useEffect(() => {\r\n            if (isLoading && validateForm()) {\r\n                handleSubmit().then(() => {\r\n                    setLoading(false);\r\n                });\r\n            }\r\n        }, [isLoading]);\r\n\r\n        const handleClick = () => setLoading(true);\r\n\r\n        return (\r\n            <Button\r\n                className=\"btn\"\r\n                variant=\"primary\"\r\n                disabled={isLoading}\r\n                onClick={!isLoading ? handleClick : null}\r\n                type=\"submit\"\r\n            >\r\n                {isLoading ? 'Loading...' : 'Submit'}\r\n            </Button>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            {renderForm()}\r\n            <div className=\"cover\" id=\"cover\"></div>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Test from './Test';\r\nimport Signup from './containers/Signup';\r\nimport Login from './containers/Login';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Test />\r\n  </React.StrictMode>,\r\n  document.getElementById('left_info')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Login />\r\n  </React.StrictMode>,\r\n  document.getElementById('login_pop_up')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Signup />\r\n  </React.StrictMode>,\r\n  document.getElementById('signup_pop_up')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n//login button\r\ndocument.getElementById(\"login_button\").addEventListener(\"click\", openFormLogin);\r\ndocument.getElementById(\"login_pop_up_close\").addEventListener(\"click\", closeFormLogin);\r\n\r\n\r\nfunction openFormLogin() {\r\n  document.getElementById(\"log_in_form\").style.display = \"block\"\r\n  document.getElementById(\"cover\").style.display = \"block\";\r\n}\r\n\r\nfunction closeFormLogin() {\r\n  document.getElementById(\"log_in_form\").style.display = \"none\";\r\n  document.getElementById(\"cover\").style.display = \"none\";\r\n}\r\n\r\n\r\n//sign up button\r\ndocument.getElementById(\"sign_up_button\").addEventListener(\"click\", openFormSignUp);\r\ndocument.getElementById(\"pop_up_close\").addEventListener(\"click\", closeForm);\r\n\r\nfunction openFormSignUp() {\r\n  document.getElementById(\"sign_up_form\").style.display = \"block\"\r\n  document.getElementById(\"cover\").style.display = \"block\";\r\n}\r\n\r\nfunction closeForm() {\r\n  document.getElementById(\"sign_up_form\").style.display = \"none\";\r\n  document.getElementById(\"cover\").style.display = \"none\";\r\n}\r\n"],"sourceRoot":""}